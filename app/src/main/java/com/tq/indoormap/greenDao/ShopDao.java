package com.tq.indoormap.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tq.indoormap.entity.Shop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOP".
*/
public class ShopDao extends AbstractDao<Shop, Long> {

    public static final String TABLENAME = "SHOP";

    /**
     * Properties of entity Shop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Guid = new Property(1, String.class, "guid", false, "GUID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Introduction = new Property(4, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Level = new Property(5, int.class, "level", false, "LEVEL");
        public final static Property TypeId = new Property(6, Long.class, "typeId", false, "TYPE_ID");
        public final static Property Icon = new Property(7, String.class, "icon", false, "ICON");
        public final static Property PointX = new Property(8, float.class, "pointX", false, "POINT_X");
        public final static Property PointY = new Property(9, float.class, "pointY", false, "POINT_Y");
        public final static Property Remark = new Property(10, String.class, "remark", false, "REMARK");
        public final static Property Node = new Property(11, String.class, "node", false, "NODE");
    }


    public ShopDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GUID\" TEXT UNIQUE ," + // 1: guid
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" TEXT," + // 3: type
                "\"INTRODUCTION\" TEXT," + // 4: introduction
                "\"LEVEL\" INTEGER NOT NULL ," + // 5: level
                "\"TYPE_ID\" INTEGER," + // 6: typeId
                "\"ICON\" TEXT," + // 7: icon
                "\"POINT_X\" REAL NOT NULL ," + // 8: pointX
                "\"POINT_Y\" REAL NOT NULL ," + // 9: pointY
                "\"REMARK\" TEXT," + // 10: remark
                "\"NODE\" TEXT);"); // 11: node
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(5, introduction);
        }
        stmt.bindLong(6, entity.getLevel());
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(7, typeId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(8, icon);
        }
        stmt.bindDouble(9, entity.getPointX());
        stmt.bindDouble(10, entity.getPointY());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(12, node);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Shop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String guid = entity.getGuid();
        if (guid != null) {
            stmt.bindString(2, guid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(5, introduction);
        }
        stmt.bindLong(6, entity.getLevel());
 
        Long typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(7, typeId);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(8, icon);
        }
        stmt.bindDouble(9, entity.getPointX());
        stmt.bindDouble(10, entity.getPointY());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(11, remark);
        }
 
        String node = entity.getNode();
        if (node != null) {
            stmt.bindString(12, node);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Shop readEntity(Cursor cursor, int offset) {
        Shop entity = new Shop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // guid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // introduction
            cursor.getInt(offset + 5), // level
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // typeId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // icon
            cursor.getFloat(offset + 8), // pointX
            cursor.getFloat(offset + 9), // pointY
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remark
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // node
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Shop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntroduction(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLevel(cursor.getInt(offset + 5));
        entity.setTypeId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIcon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPointX(cursor.getFloat(offset + 8));
        entity.setPointY(cursor.getFloat(offset + 9));
        entity.setRemark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Shop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Shop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Shop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
